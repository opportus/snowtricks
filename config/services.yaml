# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    locale: 'en'
    app_name: 'SnowTricks'
    form_theme: 'bootstrap_4_layout.html.twig'

    # Controller action params. Will be replaced by action annotation in futur...
    action_parameters:
        # Home Controller...
        App\Controller\HomeController::getHome:
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'home/get.html.twig'

        # User Controller...
        App\Controller\UserController::postUserBySignUpForm:
            entity:
                class: 'App\Entity\User'
            form:
                class: 'App\Form\Type\UserSignUpType'
                options:
                    data_class: 'App\Entity\Dto\UserDto'
                    method: 'POST'
                    validation_groups: ['user.form.sign_up']
            response:
                -
                    status: 201
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 400
                    format: 'html'
                    template: 'user/sign_up.html.twig'
                -
                    status: 409
                    format: 'html'
                    template: 'user/sign_up.html.twig'
            session:
                -
                    status: 201
                    flash:
                        message:
                            id: 'user.sign_up.notification.201'
                            parameters:
                                username: 'getUsername'
                                email: 'getEmail'
                            domain: ~
                            locale: ~

        App\Controller\UserController::getUserSignUpEmptyForm:
            form:
                class: 'App\Form\Type\UserSignUpType'
                options:
                    method: 'POST'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'user/sign_up.html.twig'
        App\Controller\UserController::patchUserByActivationEmailForm:
            entity:
                class: 'App\Entity\User'
                id: 'id'
            form:
                class: 'App\Form\Type\UserActivationEmailType'
                options:
                    data_class: 'App\Entity\Dto\UserDto'
                    method: 'PATCH'
                    csrf_protection: false
            response:
                -
                    status: 204
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 400
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 403
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 404
                    redirection:
                        route:
                            name: 'get_home'
            session:
                -
                    status: 204
                    flash:
                        message:
                            id: 'user.activation.notification.204'
                -
                    status: 400
                    flash:
                        message:
                            id: 'user.activation.notification.400'
                -
                    status: 403
                    flash:
                        message:
                            id: 'user.activation.notification.403'
                -
                    status: 404
                    flash:
                        message:
                            id: 'user.activation.notification.404'
        App\Controller\UserController::getUserPasswordResetRequestEmptyForm:
            form:
                class: 'App\Form\Type\UserPasswordResetRequestType'
                options:
                    method: 'POST'
                    data_class: 'App\Entity\Dto\UserDto'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'user/password_reset_request.html.twig'
        App\Controller\UserController::proceedByUserPasswordResetRequestForm:
            form:
                class: 'App\Form\Type\UserPasswordResetRequestType'
                options:
                    method: 'POST'
                    data_class: 'App\Entity\Dto\UserDto'
                    validation_groups: ['user.form.password_reset_request']
            response:
                -
                    status: 204
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 400
                    template: 'user/password_reset_request.html.twig'
                -
                    status: 404
                    template: 'user/password_reset_request.html.twig'
            session:
                -
                    status: 204
                    flash:
                        message:
                            id: 'user.password_reset_request.notification.204'
        App\Controller\UserController::getUserPasswordResetEmptyForm:
            form:
                class: 'App\Form\Type\UserPasswordResetType'
                options:
                    method: 'PATCH'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'user/password_reset.html.twig'
        App\Controller\UserController::patchUserByPasswordResetForm:
            entity:
                class: 'App\Entity\User'
                id: 'id'
            form:
                class: 'App\Form\Type\UserPasswordResetType'
                options:
                    data_class: 'App\Entity\Dto\UserDto'
                    method: 'PATCH'
                    validation_groups: ['user.form.password_reset']
            response:
                -
                    status: 204
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 400
                    template: 'user/password_reset_request.html.twig'
                -
                    status: 403
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 404
                    redirection:
                        route:
                            name: 'get_home'
            session:
                -
                    status: 204
                    flash:
                        message:
                            id: 'user.password_reset.notification.204'
                -
                    status: 403
                    flash:
                        message:
                            id: 'user.password_reset.notification.403'
                -
                    status: 404
                    flash:
                        message:
                            id: 'user.password_reset.notification.404'
        App\Controller\UserController::getUserSignInEmptyForm:
            entity:
                class: 'App\Entity\User'
            form:
                class: 'App\Form\Type\UserSignInType'
                options:
                    data_class: 'App\Entity\Dto\UserDto'
                    method: 'POST'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'user/sign_in.html.twig'

        # Trick Controller...
        App\Controller\TrickController::getTrickCollection:
            entity:
                class: 'App\Entity\Trick'
            response:
                -
                    format: 'json'
                    status: 200
                    template: 'trick/collection.html.twig'
        App\Controller\TrickController::getTrick:
            entity:
                class: 'App\Entity\Trick'
                id: 'slug'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'trick/get.html.twig'
        App\Controller\TrickController::getTrickEditForm:
            entity:
                class: 'App\Entity\Trick'
                id: 'slug'
            form:
                class: 'App\Form\Type\TrickEditType'
                options:
                    data_class: 'App\Entity\Dto\TrickDto'
                    method: 'PUT'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'trick/edit.html.twig'
        App\Controller\TrickController::getTrickEditEmptyForm:
            entity:
                class: 'App\Entity\Trick'
            form:
                class: 'App\Form\Type\TrickEditType'
                options:
                    method: 'POST'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'trick/edit.html.twig'
        App\Controller\TrickController::postTrickByEditForm:
            entity:
                class: 'App\Entity\Trick'
                id: 'slug'
            form:
                class: 'App\Form\Type\TrickEditType'
                options:
                    data_class: 'App\Entity\Dto\TrickDto'
                    method: 'POST'
                    validation_groups: ['trick.form.edit']
            response:
                -
                    status: 201
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 400
                    format: 'html'
                    template: 'trick/edit.html.twig'
        App\Controller\TrickController::putTrickByEditForm:
            entity:
                class: 'App\Entity\Trick'
                id: 'slug'
            form:
                class: 'App\Form\Type\TrickEditType'
                options:
                    data_class: 'App\Entity\Dto\TrickDto'
                    method: 'PUT'
                    validation_groups: ['trick.form.edit']
            response:
                -
                    status: 204
                    redirection:
                        route:
                            name: 'get_home'
                -
                    status: 400
                    format: 'html'
                    template: 'trick/edit.html.twig'
        App\Controller\TrickController::deleteTrickByDeleteForm:
            entity:
                class: 'App\Entity\Trick'
                id: 'slug'
            form:
                class: 'App\Form\Type\TrickDeleteType'
                options:
                    method: 'DELETE'
            response:
                -
                    status: 204
                    format: 'json'

        # Trick Comment Controller...
        App\Controller\TrickCommentController::getTrickCommentCollection:
            entity:
                class: 'App\Entity\TrickComment'
            response:
                -
                    format: 'json'
                    status: 200
                    template: 'trick/comment/collection.html.twig'
        App\Controller\TrickCommentController::getTrickComment:
            entity:
                class: 'App\Entity\TrickComment'
                id: 'id'
            response:
                -
                    format: 'json'
                    status: 200
                    template: 'trick/comment/get.html.twig'
        App\Controller\TrickCommentController::postTrickCommentByEditForm:
            entity:
                class: 'App\Entity\TrickComment'
            form:
                class: 'App\Form\Type\TrickCommentEditType'
                options:
                    data_class: 'App\Entity\Dto\TrickCommentDto'
                    method: 'POST'
                    validation_groups: ['trick_comment.form.edit']
            response:
                -
                    format: 'json'
                    status: 201
        App\Controller\TrickCommentController::putTrickCommentByEditForm:
            entity:
                class: 'App\Entity\TrickComment'
                id: 'id'
            form:
                class: 'App\Form\Type\TrickCommentEditType'
                options:
                    data_class: 'App\Entity\Dto\TrickCommentDto'
                    method: 'PUT'
                    validation_groups: ['trick_comment.form.edit']
            response:
                -
                    format: 'json'
                    status: 204
        App\Controller\TrickCommentController::deleteTrickCommentByDeleteForm:
            entity:
                class: 'App\Entity\TrickComment'
                id: 'id'
            form:
                class: 'App\Form\Type\TrickCommentDeleteType'
                options:
                    method: 'DELETE'
            response:
                -
                    format: 'json'
                    status: 204
        App\Controller\TrickCommentController::getTrickCommentEditForm:
            entity:
                class: 'App\Entity\TrickComment'
                id: 'id'
            form:
                class: 'App\Form\Type\TrickCommentEditType'
                options:
                    data_class: 'App\Entity\Dto\TrickCommentDto'
                    method: 'PUT'
            response:
                -
                    format: 'json'
                    status: 200
                    template: 'trick/comment/edit.html.twig'
        App\Controller\TrickCommentController::getTrickCommentEmptyEditForm:
            form:
                class: 'App\Form\Type\TrickCommentEditType'
                options:
                    method: 'POST'
            response:
                -
                    format: 'html'
                    status: 200
                    template: 'trick/comment/edit.html.twig'
                -
                    format: 'json'
                    status: 200
                    template: 'trick/comment/edit.html.twig'

services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.
        public: false       # Allows optimizing the container by removing unused services; this also means
                            # fetching services directly from the container via $container->get() won't work.
                            # The best practice is to be explicit about your dependencies anyway.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/*'
        exclude: '../src/{Entity,Migrations,Tests}'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones

    # Controller...
    App\Controller\HomeController:
        arguments:
            $parameters: '%action_parameters%'
        tags:
            - { name: controller.service_arguments }

    App\Controller\UserController:
        arguments:
            $parameters: '%action_parameters%'
        tags:
            - { name: controller.service_arguments }

    App\Controller\TrickController:
        arguments:
            $parameters: '%action_parameters%'
        tags:
            - { name: controller.service_arguments }

    App\Controller\TrickCommentController:
        arguments:
            $parameters: '%action_parameters%'
        tags:
            - { name: controller.service_arguments }

    # Response Factory...
    App\HttpFoundation\ResponseFactoryInterface: '@App\HttpFoundation\ResponseFactory'
    App\HttpFoundation\ResponseFactory:
        arguments:
            $parameters: '%action_parameters%'

    # Session Manager...
    App\HttpFoundation\SessionManagerInterface: '@App\HttpFoundation\SessionManager'
    App\HttpFoundation\SessionManager:
        arguments:
            $parameters: '%action_parameters%'

    # File Uploader...
    App\HttpFoundation\FileUploaderInterface: '@App\HttpFoundation\FileUploader'

    # Mailer...
    App\Mailer\MailerInterface: '@App\Mailer\Mailer'
    App\Mailer\Mailer:
        arguments:
            $parameters:
                send_user_sign_up_email:
                    from: snowtricks@example.com
                    template: user/sign_up_email.html.twig
                send_user_activation_email:
                    from: snowtricks@example.com
                    template: user/activation_email.html.twig
                send_user_password_reset_email:
                    from: snowtricks@example.com
                    template: user/password_reset_email.html.twig

    # Validator...
    App\Validator\ValidatorInterface: '@App\Validator\Validator'
    App\Validator\Validator:
        arguments:
            $parameters: []
            $validator: '@Symfony\Component\Validator\Validator\ValidatorInterface'
            $logger: '@logger'

    # Event listener...
    App\EventListener\ExceptionHandlerListener:
        tags:
            - { name: kernel.event_listener, event: kernel.exception }
    App\EventListener\RequestValidatorListener:
        tags:
            - { name: kernel.event_listener, event: kernel.request }
    App\EventListener\ResponseFactoryListener:
        tags:
            - { name: kernel.event_listener, event: kernel.view, priority: 80 }
    App\EventListener\SessionManagerListener:
        tags:
            - { name: kernel.event_listener, event: kernel.view, priority: 90 }
    App\EventListener\ObjectMapperRecursorListener:
        tags:
            - { name: kernel.event_listener, event: 'opportus_object_mapper.set_target_point_value', method: 'onSetTargetPointValue' }


    # Event subscriber...
    App\EventSubscriber\EntityValidatorSubscriber:
        tags:
            - { name: doctrine.event_listener, event: prePersist, priority: 90}
            - { name: doctrine.event_listener, event: preUpdate, priority: 90}
            - { name: doctrine.event_listener, event: preDelete, priority: 90}
